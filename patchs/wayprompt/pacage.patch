diff --no-dereference -ruN wayprompt/build.zig wayprompt.patched/build.zig
--- wayprompt/build.zig	2024-06-30 23:07:40.243384418 +0000
+++ wayprompt.patched/build.zig	2024-06-30 23:15:41.269475916 +0000
@@ -22,21 +22,21 @@
     scanner.generate("wl_seat", 8);
     scanner.generate("wl_output", 4);
 
-    const wayland = b.createModule(.{ .source_file = scanner.result });
+    const wayland = b.createModule(.{ .root_source_file = scanner.result });
     const xkbcommon = b.createModule(.{
-        .source_file = .{ .path = "deps/zig-xkbcommon/src/xkbcommon.zig" },
+        .root_source_file = .{ .path = "deps/zig-xkbcommon/src/xkbcommon.zig" },
     });
     const pixman = b.createModule(.{
-        .source_file = .{ .path = "deps/zig-pixman/pixman.zig" },
+        .root_source_file = .{ .path = "deps/zig-pixman/pixman.zig" },
     });
     const spoon = b.createModule(.{
-        .source_file = .{ .path = "deps/zig-spoon/import.zig" },
+        .root_source_file = .{ .path = "deps/zig-spoon/import.zig" },
     });
     const fcft = b.createModule(.{
-        .source_file = .{ .path = "deps/zig-fcft/fcft.zig" },
-        .dependencies = &.{
-            .{ .name = "pixman", .module = pixman },
-        },
+        .root_source_file = .{ .path = "deps/zig-fcft/fcft.zig" },
+        // .dependencies = &.{
+        //     .{ .name = "pixman", .module = pixman },
+        // },
     });
 
     const wayprompt_cli = b.addExecutable(.{
@@ -46,17 +46,17 @@
         .optimize = optimize,
     });
     wayprompt_cli.linkLibC();
-    wayprompt_cli.addModule("wayland", wayland);
+    wayprompt_cli.root_module.addImport("wayland", wayland);
     wayprompt_cli.linkSystemLibrary("wayland-client");
     wayprompt_cli.linkSystemLibrary("wayland-cursor");
     scanner.addCSource(wayprompt_cli);
-    wayprompt_cli.addModule("fcft", fcft);
+    wayprompt_cli.root_module.addImport("fcft", fcft);
     wayprompt_cli.linkSystemLibrary("fcft");
-    wayprompt_cli.addModule("xkbcommon", xkbcommon);
+    wayprompt_cli.root_module.addImport("xkbcommon", xkbcommon);
     wayprompt_cli.linkSystemLibrary("xkbcommon");
-    wayprompt_cli.addModule("pixman", pixman);
+    wayprompt_cli.root_module.addImport("pixman", pixman);
     wayprompt_cli.linkSystemLibrary("pixman-1");
-    wayprompt_cli.addModule("spoon", spoon);
+    wayprompt_cli.root_module.addImport("spoon", spoon);
     wayprompt_cli.addOptions("build_options", options);
     wayprompt_cli.pie = pie;
     b.installArtifact(wayprompt_cli);
@@ -68,17 +68,17 @@
         .optimize = optimize,
     });
     wayprompt_pinentry.linkLibC();
-    wayprompt_pinentry.addModule("wayland", wayland);
+    wayprompt_pinentry.root_module.addImport("wayland", wayland);
     wayprompt_pinentry.linkSystemLibrary("wayland-client");
     wayprompt_pinentry.linkSystemLibrary("wayland-cursor");
     scanner.addCSource(wayprompt_pinentry);
-    wayprompt_pinentry.addModule("fcft", fcft);
+    wayprompt_pinentry.root_module.addImport("fcft", fcft);
     wayprompt_pinentry.linkSystemLibrary("fcft");
-    wayprompt_pinentry.addModule("xkbcommon", xkbcommon);
+    wayprompt_pinentry.root_module.addImport("xkbcommon", xkbcommon);
     wayprompt_pinentry.linkSystemLibrary("xkbcommon");
-    wayprompt_pinentry.addModule("pixman", pixman);
+    wayprompt_pinentry.root_module.addImport("pixman", pixman);
     wayprompt_pinentry.linkSystemLibrary("pixman-1");
-    wayprompt_pinentry.addModule("spoon", spoon);
+    wayprompt_pinentry.root_module.addImport("spoon", spoon);
     wayprompt_pinentry.addOptions("build_options", options);
     wayprompt_pinentry.pie = pie;
     b.installArtifact(wayprompt_pinentry);
diff --no-dereference -ruN wayprompt/deps/zig-wayland/build.zig wayprompt.patched/deps/zig-wayland/build.zig
--- wayprompt/deps/zig-wayland/build.zig	2024-06-30 23:07:41.043418190 +0000
+++ wayprompt.patched/deps/zig-wayland/build.zig	2024-06-30 23:15:40.782790373 +0000
@@ -24,7 +24,7 @@
             .optimize = optimize,
         });
 
-        exe.addModule("wayland", wayland);
+        exe.root_module.addImport("wayland", wayland);
         scanner.addCSource(exe);
         exe.linkLibC();
         exe.linkSystemLibrary("wayland-client");
@@ -40,7 +40,7 @@
             .optimize = optimize,
         });
 
-        scanner_tests.addModule("wayland", wayland);
+        scanner_tests.root_module.addImport("wayland", wayland);
 
         test_step.dependOn(&scanner_tests.step);
     }
@@ -51,7 +51,7 @@
             .optimize = optimize,
         });
 
-        ref_all.addModule("wayland", wayland);
+        ref_all.root_module.addImport("wayland", wayland);
         scanner.addCSource(ref_all);
         ref_all.linkLibC();
         ref_all.linkSystemLibrary("wayland-client");
@@ -83,18 +83,20 @@
     };
 
     pub fn create(b: *Build, options: Options) *Scanner {
+        const target = b.standardTargetOptions(.{});
         const wayland_xml_path = options.wayland_xml_path orelse blk: {
-            const pc_output = b.exec(&.{ "pkg-config", "--variable=pkgdatadir", "wayland-scanner" });
+            const pc_output = b.run(&.{ "pkg-config", "--variable=pkgdatadir", "wayland-scanner" });
             break :blk b.pathJoin(&.{ mem.trim(u8, pc_output, &std.ascii.whitespace), "wayland.xml" });
         };
         const wayland_protocols_path = options.wayland_protocols_path orelse blk: {
-            const pc_output = b.exec(&.{ "pkg-config", "--variable=pkgdatadir", "wayland-protocols" });
+            const pc_output = b.run(&.{ "pkg-config", "--variable=pkgdatadir", "wayland-protocols" });
             break :blk mem.trim(u8, pc_output, &std.ascii.whitespace);
         };
 
         const zig_wayland_dir = fs.path.dirname(@src().file) orelse ".";
         const exe = b.addExecutable(.{
             .name = "zig-wayland-scanner",
+            .target = target,
             .root_source_file = .{ .path = b.pathJoin(&.{ zig_wayland_dir, "src/scanner.zig" }) },
         });
 